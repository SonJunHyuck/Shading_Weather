#version 430

layout(local_size_x = 256) in;

layout(location = 0) uniform int current_frame;
layout(location = 1) uniform float particle_res;
layout(location = 2) uniform sampler2D wind_texture;
layout(location = 3) uniform sampler2D particle_texture;
layout(location = 4) uniform int tail_length;

layout(std430, binding = 0) buffer iblock { float indices[]; };
layout(std430, binding = 1) buffer pblock { vec2 positions[]; };
layout(std430, binding = 2) buffer tblock { vec2 tails[]; };
layout(std430, binding = 3) buffer ablock { float ages[]; };
layout(std430, binding = 4) buffer lblock { float lifes[]; };
layout(std430, binding = 5) buffer tcblock { vec4 tail_colors[]; };

void main ()
{
   // 1. 변수 설정
   int index = int(gl_GlobalInvocationID);
   float delta = 1.0f / 60.0f;
   
   float particle_index = indices[index];
   float age = ages[index];
   float life = lifes[index];

   int index_tail = current_frame % tail_length;

   vec2 position;
   vec2 velocity;

   // 2. 텍스쳐 기반 초기 위치 설정
   vec4 color = texture(particle_texture, vec2(
   fract(particle_index / particle_res), floor(particle_index / particle_res) / particle_res));

   vec2 particle_pos = vec2(
       color.r / 255.0 + color.b,
       color.g / 255.0 + color.a);

   if(age == 0)
   {
        // 처음 시작 위치 설정
        position = vec2(2.0 * particle_pos.x - 1.0, 1.0 - 2.0 * particle_pos.y);
   }
   else
   {
        // 입자 경로 저장
        position = positions[index];
        tails[tail_length * index + index_tail] = position;
   }

   // 3. 바람 입자의 수명이 다 했을 경우 -> 초기 위치로 보내고, 수명 초기화
   if(life < age)
   {
        position = vec2(2.0 * particle_pos.x - 1.0, 1.0 - 2.0 * particle_pos.y);
        age = 0;
   }

   // 4. 바람 입자의 속도 가져오기
   velocity = texture(wind_texture, position).xy;
 
    // 5. 바람 입자 색깔 설정
   float opacity = age / life;
   tail_colors[tail_length * index + index_tail] = vec4(length(velocity), length(velocity), 1 - length(velocity), min(1, 0.5f + opacity));

    // 속도 min / max 값 설정  0 ~ 1 -> -0.5 ~ 0.5, Frame 당 속도 계산
   velocity -= vec2(0.5f, 0.5f);
   velocity *= delta * delta * 32;
   age += delta * 20;

   // 다음 위치 = 현 위치 + 현 위치에서의 속도
   positions[index] = position + velocity.xy;
   ages[index] = age;
}
